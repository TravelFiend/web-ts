{"version":3,"sources":["src/views/UserForm.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,IAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;ADAA,IAAA,QAAA;ACEA,ADFA,ICEM,QAAQ,GAAG,IAAI,UAAA,CAAA,QAAJ,CAAa,QAAQ,CAAC,cAAT,CAAwB,MAAxB,CAAb,CAAjB;AAEA,ADJA,QCIQ,CAAC,GDJT,GCIA;ADHE,WAAA,QAAA,CAAmB,MAAnB,EAAkC;AAAf,SAAA,MAAA,GAAA,MAAA;AAAkB;;AAAA;;AAErC,EAAA,QAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,WAAO;AACL,sBAAgB,KAAK,aADhB;AAEL,sBAAgB,KAAK;AAFhB,KAAP;AAID,GALD;;AAKC;;AAED,EAAA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACE,IAAA,OAAO,CAAC,GAAR,CAAY,gBAAZ;AACD,GAFD;;AAEC;;AAED,EAAA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACE,IAAA,OAAO,CAAC,GAAR,CAAY,gBAAZ;AACD,GAFD;;AAIA,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,sHAAP;AAOD,GARD;;AAQC;;AAED,EAAA,QAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,QAAX,EAAqC;AACnC,QAAM,SAAS,GAAG,KAAK,SAAL,EAAlB;;mCAEQ,KAAG;AACH,UAAA,EAAA,GAAwB,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAxB;AAAA,UAAC,SAAS,GAAA,EAAA,CAAA,CAAA,CAAV;AAAA,UAAY,QAAQ,GAAA,EAAA,CAAA,CAAA,CAApB;;AAEN,MAAA,QAAQ,CAAC,gBAAT,CAA0B,QAA1B,EAAoC,OAApC,CAA4C,UAAA,EAAA,EAAE;AAC5C,QAAA,EAAE,CAAC,gBAAH,CAAoB,SAApB,EAA+B,SAAS,CAAC,GAAD,CAAxC;AACD,OAFD;;;AAHF,SAAI,IAAI,GAAR,IAAe,SAAf,EAAwB;cAAhB;AAMP;;AAAA;AACF,GAVD;;AAUC;;AAED,EAAA,QAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,eAAe,GAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAxB;AACA,IAAA,eAAe,CAAC,SAAhB,GAA4B,KAAK,QAAL,EAA5B;AAEA,SAAK,UAAL,CAAgB,eAAe,CAAC,OAAhC;AAEA,SAAK,MAAL,CAAY,MAAZ,CAAmB,eAAe,CAAC,OAAnC;AACD,GAPD;;AAOC;AACH,SAAA,QAAA;AAhDA,CAAA,EAAA;;AAAa,OAAA,CAAA,QAAA,GAAA,QAAA;AAgDZ","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["export class UserForm {\n  constructor(public parent: Element){};\n\n  eventsMap(): { [key: string]: () => void } {\n    return {\n      'click:button': this.onButtonClick,\n      'mouseover:h1': this.onHeaderHover\n    };\n  };\n\n  onButtonClick(): void {\n    console.log('Button clicked');\n  };\n\n  onHeaderHover(): void {\n    console.log('h1 was hovered');\n  }\n\n  template(): string {\n    return `\n      <div>\n        <h1>User Form</h1>\n        <input />\n        <button>Click Me!</button>\n      </div>\n    `\n  };\n\n  bindEvents(fragment: DocumentFragment): void {\n    const eventsMap = this.eventsMap();\n\n    for(let key in eventsMap){\n      const [eventName, selector] = key.split(':');\n\n      fragment.querySelectorAll(selector).forEach(el => {\n        el.addEventListener(eventName, eventsMap[key]);\n      });\n    };\n  };\n\n  render(): void {\n    const templateElement = document.createElement('template');\n    templateElement.innerHTML = this.template();\n\n    this.bindEvents(templateElement.content);\n\n    this.parent.append(templateElement.content);\n  };\n};\n","import { UserForm } from './views/UserForm';\n\nconst userForm = new UserForm(document.getElementById('root'));\n\nuserForm.render();\n"]}